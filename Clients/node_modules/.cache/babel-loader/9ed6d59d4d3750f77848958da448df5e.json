{"ast":null,"code":"var _jsxFileName = \"/Users/university/Documents/SIT313/Tasks /Task 10.2 /client/src/components/FindTask.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport TaskList from './Task_List';\nimport Search from './Find';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContextContainer = /*#__PURE__*/React.createContext(null); // creating context global varuiable to hold state\n\nfunction FindTask() {\n  _s();\n\n  const [refreshed, updateRefreshed] = useState(true);\n  const [Task, setTask] = useState({});\n  const [searchTerm, setSearchTerm] = useState({\n    criteria: \"Tittle\",\n    term: \"\"\n  }, {\n    criteria: \"Suburb\",\n    term: \"\"\n  });\n\n  function searchTasks(e) {\n    //setSearchTerm(e.target.value);\n    setSearchTerm({ ...searchTerm,\n      term: e.target.value\n    }); // keep appstate and update\n  }\n\n  function setCriteria(e) {\n    //console.log('crit: '+e.target.value);\n    //setSearchCriteria(e.target.value);\n    setSearchTerm({ ...searchTerm,\n      criteria: e.target.value\n    }); // keep appstate and update\n  }\n\n  const handleDelete = e => {\n    e.stopPropagation(); // stop event bubbling, ie trigger of modal      \n\n    let tmpId = e.target.id;\n    let filteredList = Task.data.filter(function (task) {\n      return task._id !== tmpId;\n    });\n    setTask({ ...Task,\n      data: filteredList\n    }); // update data\n  };\n\n  if (refreshed) {\n    // on refresh get list from db\n    getTasks();\n    updateRefreshed(false);\n  }\n\n  function getTasks() {\n    // helper function to get data from db and add it to state.\n    axios.get('http://localhost:8000/task').then(res => {\n      if (typeof Task.data === 'undefined') {\n        setTask({\n          data: res.data\n        }); // assign data\n      }\n    }).catch(() => {\n      console.log(\"Error getting data.\");\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ContextContainer.Provider, {\n      value: {\n        searchTerm,\n        setSearchTerm\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Search, {\n          ContextContainer: ContextContainer,\n          onChange: searchTasks,\n          setCriteria: setCriteria\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n        data: Task.data,\n        ContextContainer: ContextContainer,\n        handleDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(FindTask, \"euYTwqbeSIjVh+Acx0bS2b3pIIg=\");\n\n_c = FindTask;\nexport default FindTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindTask\");","map":{"version":3,"sources":["/Users/university/Documents/SIT313/Tasks /Task 10.2 /client/src/components/FindTask.jsx"],"names":["React","useState","axios","TaskList","Search","ContextContainer","createContext","FindTask","refreshed","updateRefreshed","Task","setTask","searchTerm","setSearchTerm","criteria","term","searchTasks","e","target","value","setCriteria","handleDelete","stopPropagation","tmpId","id","filteredList","data","filter","task","_id","getTasks","get","then","res","catch","console","log","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport TaskList from './Task_List';\nimport Search from './Find'\n\n\nconst ContextContainer = React.createContext(null); // creating context global varuiable to hold state\n\n\nfunction FindTask() {\n    const [refreshed, updateRefreshed] = useState(true);\n    const [Task, setTask] = useState({});\n    const [searchTerm, setSearchTerm] = useState({ criteria: \"Tittle\", term: \"\" }, {criteria: \"Suburb\", term: \"\"});\n\n    function searchTasks(e) {\n        //setSearchTerm(e.target.value);\n        setSearchTerm({ ...searchTerm, term: e.target.value }); // keep appstate and update\n    }\n\n    function setCriteria(e) {\n        //console.log('crit: '+e.target.value);\n        //setSearchCriteria(e.target.value);\n        setSearchTerm({ ...searchTerm, criteria: e.target.value }); // keep appstate and update\n    }\n\n    const handleDelete = (e) => {\n        e.stopPropagation(); // stop event bubbling, ie trigger of modal      \n        let tmpId = e.target.id;\n        let filteredList = Task.data.filter(function (task) {\n            return task._id !== tmpId;\n        });\n\n        setTask({ ...Task, data: filteredList }); // update data\n    };\n\n    if (refreshed) { // on refresh get list from db\n        getTasks();\n        updateRefreshed(false);\n    }\n\n    function getTasks() { // helper function to get data from db and add it to state.\n        axios.get('http://localhost:8000/task')\n            .then((res) => {\n                if (typeof Task.data === 'undefined') {\n                    setTask({ data: res.data }); // assign data\n                }\n            })\n            .catch(() => {\n                console.log(\"Error getting data.\");\n            });\n\n    }\n\n    return (\n        <div>\n            <ContextContainer.Provider value={{ searchTerm, setSearchTerm }}> {/* used to provide access to state across siblings */}\n                <div style={{ width: \"100%\" }}>\n                    <Search ContextContainer={ContextContainer} onChange={searchTasks} setCriteria={setCriteria} />\n                </div>\n                <TaskList data={Task.data} ContextContainer={ContextContainer} handleDelete={handleDelete} />\n            </ContextContainer.Provider>\n        </div>\n\n    )\n}\n\nexport default FindTask;"]},"metadata":{},"sourceType":"module"}